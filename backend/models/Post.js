// backend/models/Post.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Define schema for comments
const commentSchema = new Schema({
    // _id is automatically generated by Mongoose now
    username: {
        type: String,
        required: true
    },
    text: {
        type: String,
        required: true,
        maxLength: 500
    },
    timestamp: {
        type: Date,
        default: Date.now
    },
    upvotes: {
        type: [String], // Array of usernames
        default: []
    },
    // *** NEW: Link to parent comment for threading ***
    parentId: {
        type: Schema.Types.ObjectId,
        ref: 'Post.comments', // Reference (mainly for schema clarity)
        default: null       // Null indicates a top-level comment
    }
}, {
    timestamps: false,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

commentSchema.virtual('upvoteCount').get(function() {
    return this.upvotes.length;
});


// Define schema for likes (Post likes)
const likeSchema = new Schema({
    username: {
        type: String,
        required: true
    }
}, { _id: false, timestamps: { createdAt: true, updatedAt: false } });


const postSchema = new Schema({
    username: {
        type: String,
        required: true,
        index: true
    },
    text: {
        type: String,
        required: true,
        maxLength: 1000
    },
    createdAt: {
        type: Date,
        default: Date.now,
        expires: '24h' // TTL index
    },
    likes: [likeSchema],
    comments: [commentSchema] // Comments now have _id and parentId
}, {
    timestamps: false
});

// Post Virtuals
postSchema.virtual('likeCount').get(function() { return this.likes.length; });
postSchema.virtual('commentCount').get(function() { return this.comments.length; }); // This still counts ALL comments (including replies)

postSchema.set('toJSON', { virtuals: true });
postSchema.set('toObject', { virtuals: true });

const Post = mongoose.model('Post', postSchema);

module.exports = Post;